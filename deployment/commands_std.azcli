#requirements
#az cli
#jq 

# App url
APPGW_APP1_URL=votingapp-std.contoso.com
APPGW_APP2_URL=testapp-std.contoso.com

#Parameters
RGLOCATION=centralus
RGNAME=rg-far-app-service-environments-$RGLOCATION
SQLADMINUSER=faradmin
SQLADMINPASSWORD=xxx
JUMPBOX_USER=faradmin
JUMPBOX_PASSWORD=xxx
PFX_PASSWORD=xxx
ADMIN_USER_ID=$(az ad signed-in-user show --query id -o tsv)
SUBID=$(az account show --query id -o tsv)

# 0. Create self-signed SSL certificate
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/CN=${APPGW_APP1_URL}" -out appgw_std_1.crt -keyout appgw_std_1.key
openssl pkcs12 -export -out appgw_std_1.pfx -in appgw_std_1.crt -inkey appgw_std_1.key -passout pass:$PFX_PASSWORD
CERT_DATA_1=$(cat appgw_std_1.pfx | base64 | tr -d '\n' | tr -d '\r')

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/CN=${APPGW_APP2_URL}" -out appgw_std_2.crt -keyout appgw_std_2.key
openssl pkcs12 -export -out appgw_std_2.pfx -in appgw_std_2.crt -inkey appgw_std_2.key -passout pass:$PFX_PASSWORD
CERT_DATA_2=$(cat appgw_std_2.pfx | base64 | tr -d '\n' | tr -d '\r')

# 1. creates the resource group
az group create --name "${RGNAME}" --location "${RGLOCATION}"

# 2. deploy global network related resources
az deployment group create --resource-group $RGNAME --template-file templates/network.bicep

VNET_NAME=$(az deployment group show -g $RGNAME -n network --query properties.outputs.vnetName.value -o tsv)
echo $VNET_NAME
VNET_ROUTE_NAME=$(az deployment group show -g $RGNAME -n network --query properties.outputs.vnetRouteName.value -o tsv)
echo $VNET_ROUTE_NAME

# 3. deploy ASE
az deployment group create --resource-group $RGNAME --template-file templates/ase.bicep -n ase --parameters vnetName=$VNET_NAME vnetRouteName=$VNET_ROUTE_NAME

ASE_DNS_SUFFIX=$(az deployment group show -g $RGNAME -n ase --query properties.outputs.dnsSuffix.value -o tsv)
echo $ASE_DNS_SUFFIX
ASE_SUBNET_NAME=$(az deployment group show -g $RGNAME -n ase --query properties.outputs.aseSubnetName.value -o tsv)
echo $ASE_SUBNET_NAME
ASE_NAME=$(az deployment group show -g $RGNAME -n ase --query properties.outputs.aseName.value -o tsv)
echo $ASE_NAME
ASE_ID=$(az deployment group show -g $RGNAME -n ase --query properties.outputs.aseId.value -o tsv)
echo $ASE_ID
ASE_ILB_IP_ADDRESS=$(az resource show --resource-group $RGNAME --name $ASE_NAME --resource-type "Microsoft.Web/hostingEnvironments" | jq -r '.properties.networkingConfiguration.internalInboundIpAddresses[]')
echo $ASE_ILB_IP_ADDRESS

# 4. Deploy Firewall
# Deploy AF
az deployment group create --resource-group $RGNAME --template-file templates/firewall.bicep --parameters vnetName=$VNET_NAME


# 5. deploy the private DNS
az deployment group create --resource-group $RGNAME --template-file templates/dns.bicep -n dns --parameters vnetName=$VNET_NAME zoneName=$ASE_DNS_SUFFIX ipAddress=$ASE_ILB_IP_ADDRESS


# 6. deploy jumpbox
az deployment group create --resource-group $RGNAME --template-file templates/jumpbox.bicep --parameters vnetName=$VNET_NAME adminUsername=$JUMPBOX_USER adminPassword=$JUMPBOX_PASSWORD

JUMPBOX_PUBLIC_IP=$(az deployment group show -g $RGNAME -n jumpbox --query properties.outputs.jumpboxPublicIpAddress.value -o tsv)
echo $JUMPBOX_PUBLIC_IP

JUMPBOX_SUBNET_NAME=$(az deployment group show -g $RGNAME -n jumpbox --query properties.outputs.jumpboxSubnetName.value -o tsv)
echo $JUMPBOX_SUBNET_NAME


# 7. deploy services: cosmos, sql, servicebus and storage

az deployment group create --resource-group $RGNAME --template-file templates/services.bicep \
    --parameters sqlAdminUserName=$SQLADMINUSER sqlAdminPassword=$SQLADMINPASSWORD sqlEntraIdAdminSid=$ADMIN_USER_ID
				 
COSMOSDB_NAME=$(az deployment group show -g $RGNAME -n services --query properties.outputs.cosmosDbName.value -o tsv)
echo $COSMOSDB_NAME
SQL_SERVER=$(az deployment group show -g $RGNAME -n services --query properties.outputs.sqlServerName.value -o tsv)
echo $SQL_SERVER
SQL_DATABASE=$(az deployment group show -g $RGNAME -n services --query properties.outputs.sqlDatabaseName.value -o tsv)
echo $SQL_DATABASE
KEYVAULT_NAME=$(az deployment group show -g $RGNAME -n services --query properties.outputs.keyVaultName.value -o tsv)
echo $KEYVAULT_NAME
RESOURCES_STORAGE_ACCOUNT=$(az deployment group show -g $RGNAME -n services --query properties.outputs.resourcesStorageAccountName.value -o tsv)
echo $RESOURCES_STORAGE_ACCOUNT
RESOURCES_CONTAINER_NAME=$(az deployment group show -g $RGNAME -n services --query properties.outputs.resourcesContainerName.value -o tsv)
echo $RESOURCES_CONTAINER_NAME
SERVICEBUS_NAMESPACE_NAME=$(az deployment group show -g $RGNAME -n services --query properties.outputs.serviceBusName.value -o tsv)
echo $SERVICEBUS_NAMESPACE_NAME


# Uploads image to the storage account
az storage blob upload -c $RESOURCES_CONTAINER_NAME -f Microsoft_Azure_logo_small.png -n Microsoft_Azure_logo_small.png --account-name $RESOURCES_STORAGE_ACCOUNT

RESOURCE_URL="$(az storage account show -g $RGNAME -n $RESOURCES_STORAGE_ACCOUNT --query primaryEndpoints.blob -o tsv)$RESOURCES_CONTAINER_NAME/Microsoft_Azure_logo_small.png"
echo $RESOURCE_URL

# 8. Create the app service plans and the sites
az deployment group create --resource-group $RGNAME --template-file templates/sites.bicep -n sites --parameters aseName=$ASE_NAME \
    vnetName=$VNET_NAME cosmosDbName=$COSMOSDB_NAME sqlServerName=$SQL_SERVER sqlDatabaseName=$SQL_DATABASE keyVaultName=$KEYVAULT_NAME \
    aseDnsSuffix=$ASE_DNS_SUFFIX
	
INTERNAL_APP1_URL=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.votingAppUrl.value -o tsv) && \
INTERNAL_APP2_URL=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.testAppUrl.value -o tsv) && \
VOTING_WEB_APP_PRINCIPAL_ID=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.votingWebAppIdentityPrincipalId.value -o tsv) && \
VOTING_COUNTER_FUNCTION_NAME=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.votingFunctionName.value -o tsv) && \
VOTING_COUNTER_FUNCTION_PRINCIPAL_ID=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.votingCounterFunctionIdentityPrincipalId.value -o tsv) && \
VOTING_API_NAME=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.votingApiName.value -o tsv) && \
VOTING_API_PRINCIPAL_ID=$(az deployment group show -g $RGNAME -n sites --query properties.outputs.votingApiIdentityPrincipalId.value -o tsv)

echo $INTERNAL_APP1_URL
echo $INTERNAL_APP2_URL
echo $VOTING_WEB_APP_PRINCIPAL_ID
echo $VOTING_COUNTER_FUNCTION_NAME
echo $VOTING_COUNTER_FUNCTION_PRINCIPAL_ID
echo $VOTING_API_NAME
echo $VOTING_API_PRINCIPAL_ID

# 9. Deploy RBAC for resources after Microsoft Entra ID propagation
until az ad sp show --id ${VOTING_WEB_APP_PRINCIPAL_ID} &> /dev/null ; do echo "Waiting for Microsoft Entra ID propagation" && sleep 5; done
until az ad sp show --id ${VOTING_API_PRINCIPAL_ID} &> /dev/null ; do echo "Waiting for Microsoft Entra ID propagation" && sleep 5; done
until az ad sp show --id ${VOTING_COUNTER_FUNCTION_PRINCIPAL_ID} &> /dev/null ; do echo "Waiting for Microsoft Entra ID propagation" && sleep 5; done
az deployment group create --resource-group $RGNAME --template-file templates/rbac.bicep \
    --parameters votingWebAppIdentityPrincipalId=$VOTING_WEB_APP_PRINCIPAL_ID votingCounterFunctionIdentityPrincipalId=$VOTING_COUNTER_FUNCTION_PRINCIPAL_ID \
                 keyVaultName=$KEYVAULT_NAME

# 10. Deploy App Gateway
cat <<EOF > appgwApps.parameters.json
[
  { 
    "name": "votapp", 
    "routingPriority": 100,
    "hostName": "${APPGW_APP1_URL}", 
    "backendAddresses": [ 
      { 
        "fqdn": "${INTERNAL_APP1_URL}" 
      } 
    ], 
    "certificate": { 
      "data": "${CERT_DATA_1}", 
      "password": "${PFX_PASSWORD}" 
    }, 
    "probePath": "/health" 
  },
  { 
    "name": "testapp", 
    "routingPriority": 101,
    "hostName": "${APPGW_APP2_URL}", 
    "backendAddresses": [ 
      { 
        "fqdn": "${INTERNAL_APP2_URL}" 
      } 
    ], 
    "certificate": { 
      "data": "${CERT_DATA_2}", 
      "password": "${PFX_PASSWORD}" 
    }, 
    "probePath": "/"
  }
]
EOF

az deployment group create --resource-group $RGNAME --template-file templates/appgw.bicep --parameters vnetName=$VNET_NAME  appgwApplications=@appgwApps.parameters.json

APPGW_PUBLIC_IP=$(az deployment group show -g $RGNAME -n appgw --query properties.outputs.appGwPublicIpAddress.value -o tsv)
echo $APPGW_PUBLIC_IP

# 10.1 Removes autogenerated parameter file
rm appgwApps.parameters.json

#11. Deploy private endpoints
az deployment group create --resource-group $RGNAME --template-file templates/privateEndpoints.bicep --parameters SubId=$SUBID \
    vnetName=$VNET_NAME cosmosDBName=$COSMOSDB_NAME sqlName=$SQL_SERVER \
    akvName=$KEYVAULT_NAME sbName=$SERVICEBUS_NAMESPACE_NAME 


#12. Run in Powershell - Add App Gateway certificate to the local machine - must use elevated permissions
# Replace $PFX_PASSWORD, $APPGW_PUBLIC_IP, and $APPGW_APP1_URL with the value. That variables don't exist in PowerShell.
certutil -f -p $PFX_PASSWORD -importpfx appgw_std_1.pfx
certutil -f -p $PFX_PASSWORD -importpfx appgw_std_2.pfx

rm appgw_std_1.crt appgw_std_1.key appgw_std_1.pfx appgw_std_2.crt appgw_std_2.key appgw_std_2.pfx

Add-Content "C:/windows/system32/drivers/etc/hosts" "$APPGW_PUBLIC_IP $APPGW_APP1_URL"
Add-Content "C:/windows/system32/drivers/etc/hosts" "$APPGW_PUBLIC_IP $APPGW_APP2_URL"
